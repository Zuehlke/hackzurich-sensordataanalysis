{
  "paragraphs": [
    {
      "text": "%md\nSimple way to test what is written in the topic sensor-reading the Akka endpoint. \nRequires running Kafka and <https://github.com/mspringma/hackzurich-sensordataanalysis/tree/master/sensor-ingestion>.\n\nSpark Interpreter must be configured with depency\n\n> org.apache.kafka:kafka_2.10:jar:0.10.0.0\n\nSee also <https://docs.mesosphere.com/1.7/usage/service-guides/kafka/connecting-clients/>",
      "dateUpdated": "Aug 31, 2016 1:15:08 PM",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136730_-519461703",
      "id": "20160831-131216_1727790909",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<p>Simple way to test what is written in the topic sensor-reading the Akka endpoint.\n<br  />Requires running Kafka and <a href=\"https://github.com/mspringma/hackzurich-sensordataanalysis/tree/master/sensor-ingestion\">https://github.com/mspringma/hackzurich-sensordataanalysis/tree/master/sensor-ingestion</a>.</p>\n<p>Spark Interpreter must be configured with depency</p>\n<blockquote><p>org.apache.kafka:kafka_2.10:jar:0.10.0.0</p>\n</blockquote>\n<p>See also <a href=\"https://docs.mesosphere.com/1.7/usage/service-guides/kafka/connecting-clients/\">https://docs.mesosphere.com/1.7/usage/service-guides/kafka/connecting-clients/</a></p>\n"
      },
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:901",
      "dateFinished": "Aug 31, 2016 1:15:08 PM",
      "dateStarted": "Aug 31, 2016 1:15:08 PM",
      "focus": true
    },
    {
      "title": "old way of loading moduls would have been...",
      "text": "%dep\nz.load(\"org.apache.kafka:kafka_2.10:jar:0.10.0.0\");",
      "dateUpdated": "Aug 31, 2016 1:12:28 PM",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136730_-519461703",
      "id": "20160831-131216_1870680989",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res0: org.apache.zeppelin.spark.dep.Dependency = org.apache.zeppelin.spark.dep.Dependency@67c09340\n"
      },
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:902"
    },
    {
      "text": "import org.apache.zookeeper.ZooKeeper\nimport scala.collection.JavaConversions._\nimport kafka.utils.Json\n\ndef extractConnection(zkData: String): String = {\n    val brokerInfo = Json.parseFull(zkData).get.asInstanceOf[Map[String, Any]]\n    val host = brokerInfo(\"host\").asInstanceOf[String]\n    val port = brokerInfo(\"port\").asInstanceOf[Int]\n    s\"$host:$port\"\n}\n\nval zk = new ZooKeeper(\"master.mesos:2181/dcos-service-kafka\", 10000, null)\nval ids = zk.getChildren(\"/brokers/ids\", false)\nval connections = scala.collection.mutable.ListBuffer.empty[String]\n\nfor (id <- ids) {\n    connections += (extractConnection(new String(zk.getData(\"/brokers/ids/\" + id, false, null))))\n}\nval bootstrapServers = connections.mkString(\",\")",
      "dateUpdated": "Aug 31, 2016 1:12:28 PM",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136730_-519461703",
      "id": "20160831-131216_169290746",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.zookeeper.ZooKeeper\nimport scala.collection.JavaConversions._\nimport kafka.utils.Json\nextractConnection: (zkData: String)String\nzk: org.apache.zookeeper.ZooKeeper = State:CONNECTING sessionid:0x0 local:null remoteserver:null lastZxid:0 xid:1 sent:0 recv:0 queuedpkts:0 pendingresp:0 queuedevents:0\nids: java.util.List[String] = [0, 1, 2]\nconnections: scala.collection.mutable.ListBuffer[String] = ListBuffer()\nbootstrapServers: String = 10.0.4.222:9585,10.0.7.51:9780,10.0.4.234:10054\n"
      },
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:904"
    },
    {
      "title": "Create Consumer",
      "text": "import org.apache.kafka.clients.consumer._\n\nval  consumerProps = new Properties()\nconsumerProps.put(\"bootstrap.servers\", bootstrapServers)\n  \nconsumerProps.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\")\nconsumerProps.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\")\n\nconsumerProps.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\")\nconsumerProps.put(\"group.id\", \"test-client-consumer\")\n\n\nval consumer = new KafkaConsumer[String, String](consumerProps)",
      "dateUpdated": "Aug 31, 2016 1:17:32 PM",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136731_-519846452",
      "id": "20160831-131216_1603444286",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.kafka.clients.consumer._\nconsumerProps: java.util.Properties = {}\nres98: Object = null\nres100: Object = null\nres101: Object = null\nres103: Object = org.apache.kafka.common.serialization.StringDeserializer\nres104: Object = null\nconsumer: org.apache.kafka.clients.consumer.KafkaConsumer[String,String] = org.apache.kafka.clients.consumer.KafkaConsumer@2d30a756\n"
      },
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "dateStarted": "Aug 31, 2016 1:17:32 PM",
      "dateFinished": "Aug 31, 2016 1:17:33 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:1222"
    },
    {
      "title": "Subscribe To Beginning of Topic",
      "text": "import java.util.Arrays\n\nconsumer.subscribe(Arrays.asList(\"sensor-reading\"))\nconsumer.seekToBeginning(consumer.assignment)",
      "dateUpdated": "Aug 31, 2016 1:17:35 PM",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136731_-519846452",
      "id": "20160831-131216_1147109371",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import java.util.Arrays\n"
      },
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "dateStarted": "Aug 31, 2016 1:17:35 PM",
      "dateFinished": "Aug 31, 2016 1:17:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:1240"
    },
    {
      "text": "val recordsIt = consumer.poll(100).iterator\n\nwhile (recordsIt.hasNext) {\n    val record = recordsIt.next\n    println(s\"${record.key} : ${record.value}\")\n}",
      "dateUpdated": "Aug 31, 2016 1:21:52 PM",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136731_-519846452",
      "id": "20160831-131216_831760386",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "recordsIt: java.util.Iterator[org.apache.kafka.clients.consumer.ConsumerRecord[String,String]] = org.apache.kafka.clients.consumer.ConsumerRecords$ConcatenatedIterable$1@38ed27f5\ncurl : {\"sensor\":\"dummy\", \"data\":\"nothing\"}\n"
      },
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "dateStarted": "Aug 31, 2016 1:21:52 PM",
      "dateFinished": "Aug 31, 2016 1:21:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:1258",
      "title": "you can read more than once...",
      "focus": true
    },
    {
      "text": "consumer.close",
      "dateUpdated": "Aug 31, 2016 1:22:01 PM",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136732_-521770196",
      "id": "20160831-131216_98221446",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:1276",
      "dateFinished": "Aug 31, 2016 1:22:01 PM",
      "dateStarted": "Aug 31, 2016 1:22:01 PM",
      "title": "until you finally close the consumer",
      "focus": true
    },
    {
      "title": "Interact with same topic on shell on DC/OS master node",
      "text": "%md\nTo observe somewhere else, you can actually observe on the shell the topic\n\n> ssh-into-dcos-master.sh\n\n> docker run -it mesosphere/kafka-client\n\n> ./kafka-console-consumer.sh --zookeeper master.mesos:2181/dcos-service-kafka --topic sensor-reading\n\nAnd you can end with Ctrl-C and post also a new message to the topic through the endpoint\n\n> curl --data '{\"sensor\":\"dummy\", \"data\":\"nothing\"}' --request POST --basic --user hackzurich http://ec2-54-183-149-224.us-west-1.compute.amazonaws.com:8083/sensorReading/curl\n",
      "dateUpdated": "Aug 31, 2016 1:21:19 PM",
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136731_-519846452",
      "id": "20160831-131216_1837842120",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<p>To observe somewhere else, you can actually observe on the shell the topic</p>\n<blockquote><p>ssh-into-dcos-master.sh</p>\n<p>docker run -it mesosphere/kafka-client</p>\n<p>./kafka-console-consumer.sh &ndash;zookeeper master.mesos:2181/dcos-service-kafka &ndash;topic sensor-reading</p>\n</blockquote>\n<p>And you can end with Ctrl-C and post also a new message to the topic through the endpoint</p>\n<blockquote><p>curl &ndash;data '{&ldquo;sensor&rdquo;:&ldquo;dummy&rdquo;, &ldquo;data&rdquo;:&ldquo;nothing&rdquo;}' &ndash;request POST &ndash;basic &ndash;user hackzurich http://ec2-54-183-149-224.us-west-1.compute.amazonaws.com:8083/sensorReading/curl</p>\n</blockquote>\n"
      },
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:909",
      "dateFinished": "Aug 31, 2016 1:21:19 PM",
      "dateStarted": "Aug 31, 2016 1:21:19 PM",
      "focus": true
    },
    {
      "dateUpdated": "Aug 31, 2016 1:12:29 PM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1472649136732_-521770196",
      "id": "20160831-131216_1316135021",
      "dateCreated": "Aug 31, 2016 1:12:16 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:914"
    }
  ],
  "name": "Check Sensor Data Ingestion",
  "id": "2BTYZSRE6",
  "angularObjects": {
    "2BUNTY6A7": [],
    "2BTM5DN8F": [],
    "2BVJXXAT9": [],
    "2BUH7YWXF": [],
    "2BUPDJRFP": [],
    "2BWVV1K5E": [],
    "2BX3CKUU7": [],
    "2BWCRWP3H": [],
    "2BXDSQ8MR": [],
    "2BWCBME7K": [],
    "2BWWUC47V": [],
    "2BTUTWNXU": [],
    "2BUQMWY5X": [],
    "2BX7C93MJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}